{"ast":null,"code":"var _jsxFileName = \"/Users/indsingh11/Desktop/react-master-2024/router-practice/frontend/src/App.js\";\nimport { createBrowserRouter, json, RouterProvider } from 'react-router-dom';\nimport HomePage from './Pages/HomePage';\nimport EventsPage from './Pages/EventsPage';\nimport EventDetailsPage from './Pages/EventDetailPage';\nimport NewEventPage from './Pages/NewEventPage';\nimport Layout from './Layout';\nimport EventsLayout from './EventLayout';\nimport EditEventPage from './Pages/EditEventPage';\nimport ErrorPage from './Pages/Error';\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 11\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 16\n  }, this),\n  children: [{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this),\n    loader: async () => {\n      const response = await fetch('http://localhost:8080/events');\n      if (!response.ok) {\n        // throw new Response(JSON.stringify({message:'data not found'}),{status:501})\n        console.log('inside end ');\n        throw json({\n          message: 'data not found'\n        }, {\n          status: 500\n        });\n      } else {\n        return response;\n      }\n    }\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this),\n    children: [{\n      path: ':eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this),\n      id: 'event-detail',\n      loader: async ({\n        request,\n        params\n      }) => {\n        const eventId = params.eventId;\n        const response = await fetch('http://localhost:8080/events/' + eventId);\n        if (!response.ok) {\n          throw json({\n            message: 'not found'\n          }, {\n            status: 500\n          });\n        } else {\n          return response;\n        }\n      },\n      children: [{\n        path: 'new',\n        element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 19\n        }, this)\n      }, {\n        path: 'edit',\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)\n      }]\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","json","RouterProvider","HomePage","EventsPage","EventDetailsPage","NewEventPage","Layout","EventsLayout","EditEventPage","ErrorPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","loader","response","fetch","ok","console","log","message","status","id","request","params","eventId","App","_c","$RefreshReg$"],"sources":["/Users/indsingh11/Desktop/react-master-2024/router-practice/frontend/src/App.js"],"sourcesContent":["import {createBrowserRouter, json, RouterProvider} from 'react-router-dom'\nimport HomePage from './Pages/HomePage';\nimport EventsPage from './Pages/EventsPage';\nimport EventDetailsPage from './Pages/EventDetailPage';\nimport NewEventPage from './Pages/NewEventPage';\nimport Layout from './Layout';\nimport EventsLayout from './EventLayout';\nimport EditEventPage from './Pages/EditEventPage';\nimport ErrorPage from './Pages/Error';\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nconst router=createBrowserRouter([{\n  path:'/',\n  element:<Layout/>,\n  errorElement:<ErrorPage/>,\n  children:[\n    {\n     path:'/',\n     element:<HomePage/> ,\n     loader: async ()=>{\n      const response=await  fetch('http://localhost:8080/events')\n\n  if(!response.ok){\n    // throw new Response(JSON.stringify({message:'data not found'}),{status:501})\n  console.log('inside end ')\n\n    throw json({\n      message:'data not found'   \n    },\n    {\n      status:500\n    }\n    )\n  }\nelse{\n\n  return response\n}\n     }\n    },\n\n\n\n\n    {\n    path:'events',\n    element:<EventsLayout/>,\n    children:[\n      \n      {\n        path:':eventId',\n        element:<EventDetailsPage/>,\n        id:'event-detail',\n        loader: async ({request,params})=>{\n          const eventId=params.eventId\n          const response=await fetch('http://localhost:8080/events/'+eventId)\n    \n          if(!response.ok)\n          {\n            throw json({message:'not found'},{status:500})\n    \n          }\n          else{\n            return response\n          }\n    \n        },\n       children:[{\n        \n          path:'new',\n          element:<NewEventPage/>\n       },\n       {\n        path:'edit',\n        element:<EditEventPage/>\n      }\n      \n      ] \n      }\n      \n      \n     \n    \n  \n  \n  \n  ]\n  }\n  \n]\n\n}])\nfunction App() {\n  return <RouterProvider router={router}/>;\n}\n\nexport default App;\n"],"mappings":";AAAA,SAAQA,mBAAmB,EAAEC,IAAI,EAAEC,cAAc,QAAO,kBAAkB;AAC1E,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,gBAAgB,MAAM,yBAAyB;AACtD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,YAAY,MAAM,eAAe;AACxC,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,SAAS,MAAM,eAAe;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAACb,mBAAmB,CAAC,CAAC;EAChCc,IAAI,EAAC,GAAG;EACRC,OAAO,eAACH,OAAA,CAACL,MAAM;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;EACjBC,YAAY,eAACR,OAAA,CAACF,SAAS;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;EACzBE,QAAQ,EAAC,CACP;IACCP,IAAI,EAAC,GAAG;IACRC,OAAO,eAACH,OAAA,CAACT,QAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;IACnBG,MAAM,EAAE,MAAAA,CAAA,KAAU;MACjB,MAAMC,QAAQ,GAAC,MAAOC,KAAK,CAAC,8BAA8B,CAAC;MAE/D,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;QACd;QACFC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAExB,MAAM1B,IAAI,CAAC;UACT2B,OAAO,EAAC;QACV,CAAC,EACD;UACEC,MAAM,EAAC;QACT,CACA,CAAC;MACH,CAAC,MACC;QAEF,OAAON,QAAQ;MACjB;IACK;EACD,CAAC,EAKD;IACAT,IAAI,EAAC,QAAQ;IACbC,OAAO,eAACH,OAAA,CAACJ,YAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;IACvBE,QAAQ,EAAC,CAEP;MACEP,IAAI,EAAC,UAAU;MACfC,OAAO,eAACH,OAAA,CAACP,gBAAgB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;MAC3BW,EAAE,EAAC,cAAc;MACjBR,MAAM,EAAE,MAAAA,CAAO;QAACS,OAAO;QAACC;MAAM,CAAC,KAAG;QAChC,MAAMC,OAAO,GAACD,MAAM,CAACC,OAAO;QAC5B,MAAMV,QAAQ,GAAC,MAAMC,KAAK,CAAC,+BAA+B,GAACS,OAAO,CAAC;QAEnE,IAAG,CAACV,QAAQ,CAACE,EAAE,EACf;UACE,MAAMxB,IAAI,CAAC;YAAC2B,OAAO,EAAC;UAAW,CAAC,EAAC;YAACC,MAAM,EAAC;UAAG,CAAC,CAAC;QAEhD,CAAC,MACG;UACF,OAAON,QAAQ;QACjB;MAEF,CAAC;MACFF,QAAQ,EAAC,CAAC;QAEPP,IAAI,EAAC,KAAK;QACVC,OAAO,eAACH,OAAA,CAACN,YAAY;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MACzB,CAAC,EACD;QACCL,IAAI,EAAC,MAAM;QACXC,OAAO,eAACH,OAAA,CAACH,aAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MACzB,CAAC;IAGD,CAAC;EASL,CAAC;AAIH,CAAC,CAAC,CAAC;AACH,SAASe,GAAGA,CAAA,EAAG;EACb,oBAAOtB,OAAA,CAACV,cAAc;IAACW,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAC1C;AAACgB,EAAA,GAFQD,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}